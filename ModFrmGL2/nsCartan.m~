// For Drew

function GetTracesDataUpTo(max_N, prec)
  primes := PrimesUpTo(max_N);
  odd_primes := primes[2..#primes];
  res := [];
  for p in odd_primes do
     G := GammaNSplus(p);
     M := ModularForms(G);
     Snew := NewSubspace(CuspidalSubspace(M));
     forms := [* qExpansion(f[1],prec) : f in Newforms(Snew) *];
     trace_forms := [traceForm(f,prec) : f in forms];
     if #trace_forms ne 0 then
        trace_form := &+trace_forms;
     else
        trace_form := PowerSeriesRing(Rationals())!0;
     end if;
     Append(~res, trace_form);
  end for;
  return odd_primes, res;
end function;

function GetDecompositionDimAndCharPoly(N, max_p)
  G := GammaNSplus(N);
  M := ModularSymbols(G,2,1);
  S := CuspidalSubspace(M);
  D := Decomposition(S, HeckeBound(S));
  dims := [Dimension(d) : d in D];
  primes := PrimesUpTo(max_p);
  polys := [CharacteristicPolynomial(HeckeOperator(S,p)) : p in primes];
  facs := [<primes[i], Factorization(polys[i])> : i in [1..#primes]];
  return dims, facs;
end function;

procedure DecDimCharPolyUpTo(N, max_p, output_fname)
  // This is just so that the polynomials will look better
  R<x> := PolynomialRing(Rationals());
  primes := PrimesUpTo(N);
  odd_primes := primes[5..#primes];
  output_file := Open(output_fname, "w");
  for p in odd_primes do
     fprintf output_file, "Data for X_ns+(%o):\n", p;
     dims, facs := GetDecompositionDimAndCharPoly(p, max_p);
     fprintf output_file, "Dimensions of the irreducible subspaces:\n%o\n",
             dims;
     fprintf output_file, "Factorization of the characteristic polynomial of the Hecke operators:\n%o\n\n", facs;
  end for;
  delete output_file;
end procedure;
